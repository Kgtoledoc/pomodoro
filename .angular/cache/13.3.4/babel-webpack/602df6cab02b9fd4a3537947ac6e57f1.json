{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Plugins } from \"@capacitor/core\";\nimport { NewTasksPage } from \"../pages/new-tasks/new-tasks.page\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@ionic-native/native-audio/ngx\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\n\nfunction Tab2Page_ion_list_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-list\", 7)(1, \"ion-item-sliding\")(2, \"ion-item\")(3, \"ion-grid\", 8)(4, \"ion-row\", 9)(5, \"ion-col\", 10)(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"ion-col\", 11)(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"ion-col\", 12)(13, \"ion-button\", 13);\n    i0.ɵɵlistener(\"click\", function Tab2Page_ion_list_8_Template_ion_button_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.openTask(task_r1);\n    });\n    i0.ɵɵtext(14, \"Ver\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(15, \"ion-item-options\", 14)(16, \"ion-item-option\", 15);\n    i0.ɵɵlistener(\"click\", function Tab2Page_ion_list_8_Template_ion_item_option_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.delete(task_r1);\n    });\n    i0.ɵɵelement(17, \"ion-icon\", 16);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(task_r1.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 2, task_r1.date, \"HH:mm\"));\n  }\n} //import { LocalNotifications } from \"@ionic-native/local-notifications/ngx\";\n\n\nconst {\n  LocalNotifications\n} = Plugins;\nexport let Tab2Page = /*#__PURE__*/(() => {\n  class Tab2Page {\n    constructor(modalController, alertController, toastCtrl, nativeAudio, //private localNotifications: LocalNotifications\n    navController, platform, router) {\n      this.modalController = modalController;\n      this.alertController = alertController;\n      this.toastCtrl = toastCtrl;\n      this.nativeAudio = nativeAudio;\n      this.navController = navController;\n      this.platform = platform;\n      this.router = router;\n      this.state = \"\";\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"INSIDE NGONINIT\");\n        yield LocalNotifications.requestPermission();\n        this.scheduledTasks = JSON.parse(localStorage.getItem(\"scheduledTasks\")) ? JSON.parse(localStorage.getItem(\"scheduledTasks\")) : [];\n        this.scheduledTasks = this.sortArray(this.scheduledTasks);\n        this.transformDate();\n\n        if (this.scheduledTasks.length > 0) {\n          this.scheduleBasicAllTasks();\n        }\n      });\n    }\n\n    ionViewDidEnter() {\n      console.log(\"IONVIEWDIDENTER\");\n      this.scheduledTasks = JSON.parse(localStorage.getItem(\"scheduledTasks\")) ? JSON.parse(localStorage.getItem(\"scheduledTasks\")) : [];\n      this.scheduledTasks = this.sortArray(this.scheduledTasks);\n      this.transformDate();\n      console.log(\"Scheduled Task \", this.scheduledTasks);\n    }\n\n    delete(item) {\n      this.scheduledTasks = this.scheduledTasks.filter(e => {\n        return item.id != e.id;\n      });\n      localStorage.setItem(\"scheduledTasks\", JSON.stringify(this.scheduledTasks));\n    }\n\n    transformDate() {\n      let dateNow = new Date(Date.now()).toDateString();\n      this.scheduledTasks.forEach(task => {\n        if (task.date != undefined) {\n          if (dateNow != new Date(task.date).toDateString()) {\n            task.date = new Date(dateNow + \" \" + new Date(task.date).toTimeString());\n          }\n        }\n      });\n      localStorage.setItem(\"scheduledTasks\", JSON.stringify(this.scheduledTasks));\n    }\n\n    scheduledFunction(task) {\n      LocalNotifications.schedule({\n        notifications: [{\n          title: task.title,\n          body: task.title,\n          id: Math.random() * 100,\n          extra: {\n            data: \"Pass data to your handler\"\n          },\n          iconColor: \"#0000FF\",\n          schedule: {\n            at: new Date(task.date)\n          }\n        }]\n      });\n    }\n\n    scheduleOneTask(task) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (new Date(task.date).getTime() >= new Date(Date.now()).getTime()) {\n          this.presentToast(\"Actividades programadas\");\n          this.scheduledFunction(task);\n        } else {\n          this.presentToast(\"Tiempo es menor al actual. Actividad no programada\");\n        }\n      });\n    }\n\n    scheduleBasicAllTasks() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"Schedule all tasks!\");\n        let counter = 0;\n        this.scheduledTasks.forEach(e => {\n          if (new Date(e.date).getTime() >= new Date(Date.now()).getTime()) {\n            this.scheduledFunction(e);\n            counter++;\n          }\n        });\n\n        if (counter > 0) {\n          this.presentToast(\"Actividades programadas\");\n        } else {\n          this.presentToast(\"Actividades no programadas\");\n        }\n      });\n    }\n\n    addTasks() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modal = yield this.modalController.create({\n          component: NewTasksPage\n        });\n        modal.onDidDismiss().then(d => {\n          console.log(d);\n\n          if (d.data[\"dismissed\"] != true) {\n            if (d.data.date == undefined) {} else {\n              this.scheduledTasks.push(d.data);\n              this.scheduledTasks = this.sortArray(this.scheduledTasks);\n              localStorage.setItem(\"scheduledTasks\", JSON.stringify(this.scheduledTasks));\n\n              if (d.data.date != undefined) {\n                this.scheduleOneTask(d.data);\n              } else {\n                console.log(\"Not scheduled!\");\n              }\n            }\n          } //console.log(this.tasks);\n\n        });\n        return yield modal.present();\n      });\n    }\n\n    check(task) {\n      if (task.date == undefined) {\n        /*  this.noScheduledTasks = this.noScheduledTasks.filter((e) => {\n          return task.id != e.id;\n        });\n        this.noScheduledTasks.push(task); */\n      }\n\n      localStorage.setItem(\"scheduledTasks\", JSON.stringify(this.scheduledTasks));\n      /* localStorage.setItem(\n        \"noScheduledTasks\",\n        JSON.stringify(this.noScheduledTasks)\n      ); */\n    }\n\n    sortArray(array) {\n      //console.log(\"Sort Array\");\n      array.sort((a, b) => {\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\n      }); //console.log(array);\n\n      return array;\n    }\n\n    presentToast(text) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastCtrl.create({\n          message: text,\n          duration: 3000,\n          position: \"bottom\"\n        });\n        toast.present();\n      });\n    }\n\n    openTask(task) {\n      let navigationExtras = {\n        queryParams: {\n          special: JSON.stringify(task)\n        }\n      };\n      console.log(navigationExtras);\n      this.router.navigate([\"/tasks/task-detail\"], navigationExtras);\n    }\n\n  }\n\n  Tab2Page.ɵfac = function Tab2Page_Factory(t) {\n    return new (t || Tab2Page)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i1.ToastController), i0.ɵɵdirectiveInject(i2.NativeAudio), i0.ɵɵdirectiveInject(i1.NavController), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  Tab2Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Tab2Page,\n    selectors: [[\"app-tab2\"]],\n    decls: 12,\n    vars: 3,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [3, \"fullscreen\"], [\"lines\", \"full\", \"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"vertical\", \"bottom\", \"horizontal\", \"end\", \"slot\", \"fixed\"], [\"size\", \"small\", 3, \"click\"], [\"name\", \"add\"], [\"lines\", \"full\", 1, \"row\"], [1, \"content-task\"], [1, \"ion-align-items-center\"], [\"size\", \"6\", 1, \"start-side-class\"], [\"size\", \"2\"], [\"size\", \"4\", 1, \"end-side-class\"], [\"fill\", \"outline\", 3, \"click\"], [\"side\", \"end\"], [3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"trash-outline\"]],\n    template: function Tab2Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \" Lista de Actividades \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-buttons\", 1);\n        i0.ɵɵelement(5, \"ion-menu-button\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 2)(7, \"ion-grid\");\n        i0.ɵɵtemplate(8, Tab2Page_ion_list_8_Template, 18, 5, \"ion-list\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ion-fab\", 4)(10, \"ion-fab-button\", 5);\n        i0.ɵɵlistener(\"click\", function Tab2Page_Template_ion_fab_button_click_10_listener() {\n          return ctx.addTasks();\n        });\n        i0.ɵɵelement(11, \"ion-icon\", 6);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.scheduledTasks);\n      }\n    },\n    directives: [i1.IonHeader, i1.IonToolbar, i1.IonTitle, i1.IonButtons, i1.IonMenuButton, i1.IonContent, i1.IonGrid, i4.NgForOf, i1.IonList, i1.IonItemSliding, i1.IonItem, i1.IonRow, i1.IonCol, i1.IonButton, i1.IonItemOptions, i1.IonItemOption, i1.IonIcon, i1.IonFab, i1.IonFabButton],\n    pipes: [i4.DatePipe],\n    styles: [\".time_class[_ngcontent-%COMP%]{text-align:end}ion-list-header[_ngcontent-%COMP%]{text-align:center}.content-task[_ngcontent-%COMP%]{font-size:.8em}\"]\n  });\n  return Tab2Page;\n})();","map":null,"metadata":{},"sourceType":"module"}